---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - Jeongwoo Kim
  - Jiwon Choi
thanks: "Code and data are available at: https://github.com/Kjeongwoo99/STA302H_Paper3"
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(readr)
library(palmerpenguins)
library(ggrepel)
library(maps)
library(here)
library(ggplot2)
library(dplyr)
library(knitr)
library(kableExtra)
library(statebins)

#### Read in cleaned data ####
cleaned_data_post_strat <-read_csv(file = here("data/analysis_data/usa_00002_cleaned.csv"), show_col_types = FALSE)
cleaned_data_survey <- read_csv(file = here("data/analysis_data/ns20191003_cleaned.csv"), show_col_types = FALSE)
```


# Introduction

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....



# Data {#sec-data}
```{r fig.width=10, fig.height=5}
#| echo: false
#| message: false
#| warning: false
#| label: fig-distribution-by-age-group
#| fig-cap: Distribution of Sample and Population by Age Group
# Read in the survey data
survey_data <- cleaned_data_survey

# Read in the post-stratification data
post_strat_data <- cleaned_data_post_strat

# Count the number of occurrences in each age group and calculate percentages for the survey data
survey_counts <- survey_data %>%
  group_by(age_group) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Count the number of occurrences in each age group and calculate percentages for the post-strat data
post_strat_counts <- post_strat_data %>%
  group_by(age_group) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Combine the percentages into a single data frame for plotting
combined_percentages <- rbind(
  data.frame(dataset = 'Survey', age_group = survey_counts$age_group, percentage = survey_counts$percentage),
  data.frame(dataset = 'Post-Strat', age_group = post_strat_counts$age_group, percentage = post_strat_counts$percentage)
)

# Plot the percentages with specified bar width and percentage on y-axis, and label each bar
ggplot(combined_percentages, aes(x = age_group, y = percentage, fill = dataset)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)),
            position = position_dodge(width = 0.8), 
            vjust = -0.3, # Adjust text position
            color = "black",
            size = 3) + 
  labs(x = "Age Group", y = "Proportion", title = "Distribution of Sample and Population by Age Group") +
  theme_minimal() +
  scale_fill_manual(values = c("orange", "green"))

```

```{r fig.width=10, fig.height=5}
#| echo: false
#| message: false
#| warning: false
#| label: fig-distribution-by-gender
#| fig-cap: Distribution of Sample and Population by Gender
# Read in the survey data
survey_data <- cleaned_data_survey

# Read in the post-stratification data
post_strat_data <- cleaned_data_post_strat

# Calculate percentages for the survey data by gender
survey_gender <- survey_data %>%
  group_by(gender) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Calculate percentages for the post-strat data by gender
post_strat_gender <- post_strat_data %>%
  group_by(sex) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Combine the gender percentages into a single data frame for plotting
combined_gender_percentages <- rbind(
  data.frame(dataset = 'Survey', gender = survey_gender$gender, percentage = survey_gender$percentage),
  data.frame(dataset = 'Post-Strat', gender = post_strat_gender$sex, percentage = post_strat_gender$percentage)
)

# Plot the gender percentages with specified bar width and percentage on y-axis, and label each bar
ggplot(combined_gender_percentages, aes(x = gender, y = percentage, fill = dataset)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)),
            position = position_dodge(width = 0.8), 
            vjust = -0.3, # Adjust text position
            color = "black",
            size = 3) + 
  labs(x = "Gender", y = "Proportion", title = "Distribution of Sample and Population by Gender") +
  theme_minimal() +
  scale_fill_manual(values = c("orange", "green"))

```

```{r fig.width=10, fig.height=5}
#| echo: false
#| message: false
#| warning: false
#| label: fig-distribution-by-race
#| fig-cap: Distribution of Sample and Population by Race Ethnicity
# Read in the survey data
survey_data <- cleaned_data_survey

# Read in the post-stratification data
post_strat_data <- cleaned_data_post_strat

# Calculate percentages for the survey data by race
survey_race <- survey_data %>%
  group_by(race_ethnicity) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Calculate percentages for the post-strat data by race
post_strat_race <- post_strat_data %>%
  group_by(race) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Combine the race percentages into a single data frame for plotting
combined_race_percentages <- rbind(
  data.frame(dataset = 'Survey', race = survey_race$race_ethnicity, percentage = survey_race$percentage),
  data.frame(dataset = 'Post-Strat', race = post_strat_race$race, percentage = post_strat_race$percentage)
)

# Adjust the factor levels for the 'race' column to specify the order
combined_race_percentages$race <- factor(combined_race_percentages$race, 
                                                    levels = c("White", "Black", "Asian", "American Indian", "Other"))

# Plot the race percentages with specified bar width and percentage on y-axis, and label each bar
ggplot(combined_race_percentages, aes(x = race, y = percentage, fill = dataset)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)),
            position = position_dodge(width = 0.8), 
            vjust = -0.3, # Adjust text position
            color = "black",
            size = 3) + 
  labs(x = "Race", y = "Proportion", title = "Distribution of Sample and Population by Race Ethnicity") +
  theme_minimal() +
  scale_fill_manual(values = c("orange", "green"))
```

```{r fig.width=10, fig.height=5}
#| echo: false
#| message: false
#| warning: false
#| label: fig-distribution-by-education
#| fig-cap: Distribution of Sample and Population by Education
# Read in the survey data
survey_data <- cleaned_data_survey

# Read in the post-stratification data
post_strat_data <- cleaned_data_post_strat

# Calculate percentages for the survey data by education
survey_education <- survey_data %>%
  group_by(education) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Calculate percentages for the post-strat data by education
post_strat_education <- post_strat_data %>%
  group_by(education) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100)  # Calculate percentage

# Combine the education percentages into a single data frame for plotting
combined_education_percentages <- rbind(
  data.frame(dataset = 'Survey', education = survey_education$education, percentage = survey_education$percentage),
  data.frame(dataset = 'Post-Strat', education = post_strat_education$education, percentage = post_strat_education$percentage)
)

# Adjust the factor levels for the 'education' column to specify the order
combined_education_percentages$education <- factor(combined_education_percentages$education, 
                                                    levels = c("High school or less", "Some college", "College degree", "Postgrad"))

# Plot the education percentages with the adjusted order
ggplot(combined_education_percentages, aes(x = education, y = percentage, fill = dataset)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(aes(label = sprintf("%.1f%%", percentage)),
            position = position_dodge(width = 0.8), 
            vjust = -0.3, # Adjust text position
            color = "black",
            size = 3) + 
  labs(x = "Education", y = "Proportion", title = "Distribution of Sample and Population by Education") +
  theme_minimal() +
  scale_fill_manual(values = c("orange", "green"))

```

## Survey Data

Some of our data is of penguins (@fig-bills), from @palmerpenguins.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-voters-intention-to-vote-for-trump
#| tbl-cap: Voters Intention to Support Trump
data <- cleaned_data_survey

# Prepare the data with specified order
trump_counts <- data %>%
  mutate(consider_trump = factor(consider_trump, levels = c("Yes", "No", "Other"))) %>%
  count(consider_trump, name = "Number of Respondents") %>%
  mutate(`Proportion (%)` = (`Number of Respondents` / sum(`Number of Respondents`)) * 100) %>%
  mutate(`Proportion (%)` = round(`Proportion (%)`, 2)) %>%
  rename(`Response` = consider_trump)

# Use kable to create the table
kable(trump_counts, format = "latex", booktabs = TRUE, align = "c") %>%
  kable_styling(latex_options = c("striped", "scale_down", "hold_position"), full_width = FALSE)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-voters-intention-of-their-primary-party
#| tbl-cap: Voters Intention of Their Primary Party
data <- cleaned_data_survey

# Prepare the data with specified order
party_preference_counts <- data %>%
  mutate(primary_party = factor(primary_party, levels = c("Democratic", "Republican", "Other"))) %>%
  count(primary_party, name = "Number of Respondents") %>%
  mutate(`Proportion (%)` = (`Number of Respondents` / sum(`Number of Respondents`)) * 100) %>%
  mutate(`Proportion (%)` = round(`Proportion (%)`, 2)) %>%
  rename(`Party Preference` = primary_party)

# Use kable to create the table
kable(party_preference_counts, format = "latex", booktabs = TRUE, align = "c") %>%
  kable_styling(latex_options = c("striped", "scale_down", "hold_position"), full_width = FALSE)
```

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

## Post-stratification Data 

Some of our data is of penguins (@fig-bills), from @palmerpenguins.

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

```{r}
#| label: fig-planes
#| fig-cap: Relationship between wing length and width
#| echo: false
#| warning: false
#| message: false

# analysis_data <- read_csv(here::here("data/analysis_data/analysis_data.csv"))

# analysis_data |> 
#  ggplot(aes(x = width, y = length)) +
#  geom_point(alpha = 0.8) +
#  theme_minimal() +
#  labs(x = "Wing width (mm)",
#       y = "Wing length (mm)")
```

Talk way more about it. 



# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.


# Results

Our results are summarized in @tbl-modelresults.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(rstanarm)

# first_model <- readRDS(file = here::here("models/first_model.rds"))
```

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

# modelsummary::modelsummary(
#  list(
#    "First model" = first_model
#  ),
#  statistic = "mad",
#  fmt = 2
# )
```



# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows... 

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

#pp_check(first_model) +
#  theme_classic() +
#  theme(legend.position = "bottom")

#posterior_vs_prior(first_model) +
#  theme_minimal() +
#  scale_color_brewer(palette = "Set1") +
#  theme(legend.position = "bottom") +
#  coord_flip()
```

## Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

#plot(first_model, "trace")

#plot(first_model, "rhat")
```



\newpage


# References


